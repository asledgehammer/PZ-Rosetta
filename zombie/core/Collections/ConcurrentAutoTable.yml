# zombie.core.Collections.ConcurrentAutoTable
package: zombie.core.Collections
type: class
name: ConcurrentAutoTable
extends: Object
modifiers:
  - public
notes: An auto-resizing table of
constructors:
  - name: ConcurrentAutoTable
    modifiers:
      - public
methods:
  - name: __toString
    modifiers:
      - public
    return:
      type: String
    notes: Return the counter's
  - name: add
    modifiers:
      - public
    return:
      type: void
    notes: |-
      Add the given value to current counter value.  Concurrent updates will
       not be lost, but addAndGet or getAndAdd are not implemented because the
       total counter value (i.e.,
  - name: decrement
    modifiers:
      - public
    return:
      type: void
    notes: add(long)
  - name: estimate_get
    modifiers:
      - public
    return:
      type: long
    notes: A cheaper
  - name: get
    modifiers:
      - public
    return:
      type: long
    notes: |-
      Current value of the counter.  Since other threads are updating furiously
       the value is only approximate, but it includes all counts made by the
       current thread.  Requires a pass over the internally striped counters.
  - name: increment
    modifiers:
      - public
    return:
      type: void
    notes: add(long)
  - name: internal_size
    modifiers:
      - public
    return:
      type: int
    notes: |-
      Return the internal counter striping factor.  Useful for diagnosing
       performance problems.
  - name: intValue
    modifiers:
      - public
    return:
      type: int
    notes: Same as
  - name: longValue
    modifiers:
      - public
    return:
      type: long
    notes: Same as
  - name: print
    modifiers:
      - public
    return:
      type: void
    notes: A more verbose print than
  - name: set
    modifiers:
      - public
    return:
      type: void
    notes: |-
      Atomically set the sum of the striped counters to specified value.
        Rather more expensive than a simple store, in order to remain atomic.
