# zombie.core.Collections.NonBlockingHashMapLong&lt;TypeV&gt;
package: zombie.core.Collections
type: class
name: NonBlockingHashMapLong&lt;TypeV&gt;
extends: AbstractMap
modifiers:
  - public
notes: A lock-free alternate implementation of
constructors:
  - name: NonBlockingHashMapLong
    modifiers:
      - public
    notes: >-
      Create a new NonBlockingHashMapLong with default minimum size (currently
      set
        to 8 K/V pairs or roughly 84 bytes on a standard 32-bit JVM).
  - name: NonBlockingHashMapLong
    modifiers:
      - public
    parameters:
      - name: initial_sz
        type: int
    notes: >-
      Create a new NonBlockingHashMapLong with initial room for the given
        number of elements, thus avoiding internal resizing operations to reach
        an appropriate size.  Large numbers here when used with a small count of
        elements will sacrifice space for a small amount of time gained.  The
        initial size will be rounded up internally to the next larger power of 2.
  - name: NonBlockingHashMapLong
    modifiers:
      - public
    parameters:
      - name: opt_for_space
        type: boolean
    notes: |-
      Create a new NonBlockingHashMapLong, setting the space-for-speed
        tradeoff.
  - name: NonBlockingHashMapLong
    modifiers:
      - public
    parameters:
      - name: initial_sz
        type: int
      - name: opt_for_space
        type: boolean
    notes: |-
      Create a new NonBlockingHashMapLong, setting both the initial size and
        the space-for-speed tradeoff.
methods:
  - name: clear
    modifiers:
      - public
    returnType: void
    notes: Removes all of the mappings from this map.
  - name: contains
    modifiers:
      - public
    returnType: boolean
    parameters:
      - name: val
        type: Object
        notes: a value to search for
    notes: |-
      Legacy method testing if some key maps into the specified value in this
        table.  This method is identical in functionality to
  - name: containsKey
    modifiers:
      - public
    returnType: boolean
    parameters:
      - name: key
        type: Object
    notes: Auto-boxing version of
  - name: containsValue
    modifiers:
      - public
    returnType: boolean
    parameters:
      - name: val
        type: Object
        notes: value whose presence in this map is to be tested
    notes: Returns
  - name: elements
    modifiers:
      - public
    returnType: Enumeration
    notes: Returns an enumeration of the values in this table.
  - name: entrySet
    modifiers:
      - public
    returnType: Set
    notes: Returns a
  - name: get
    modifiers:
      - public
    returnType: TypeV
    parameters:
      - name: key
        type: Object
    notes: Auto-boxing version of
  - name: keys
    modifiers:
      - public
    returnType: Enumeration
    notes: Returns an enumeration of the
  - name: keySet
    modifiers:
      - public
    returnType: Set
    notes: Returns a
  - name: print
    modifiers:
      - public
      - final
    returnType: void
    notes: Verbose printout of table internals, useful for debugging.
  - name: put
    modifiers:
      - public
    returnType: TypeV
    parameters:
      - name: key
        type: Long
      - name: val
        type: TypeV
    notes: Auto-boxing version of
  - name: putIfAbsent
    modifiers:
      - public
    returnType: TypeV
    parameters:
      - name: key
        type: Long
      - name: val
        type: TypeV
    notes: Auto-boxing version of
  - name: remove
    modifiers:
      - public
    returnType: boolean
    parameters:
      - name: key
        type: Object
      - name: Val
        type: Object
    notes: Auto-boxing version of
  - name: replace
    modifiers:
      - public
    returnType: boolean
    parameters:
      - name: key
        type: Long
      - name: oldValue
        type: TypeV
      - name: newValue
        type: TypeV
    notes: Auto-boxing version of
  - name: reprobes
    modifiers:
      - public
    returnType: long
    notes: |-
      Get and clear the current count of reprobes.  Reprobes happen on key
        collisions, and a high reprobe rate may indicate a poor hash function or
        weaknesses in the table resizing function.
  - name: size
    modifiers:
      - public
    returnType: int
    notes: Returns the number of key-value mappings in this map.
  - name: values
    modifiers:
      - public
    returnType: Collection
    notes: Returns a
