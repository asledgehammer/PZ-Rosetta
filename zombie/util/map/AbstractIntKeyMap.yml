# zombie.util.map.AbstractIntKeyMap
package: zombie.util.map
type: class
name: AbstractIntKeyMap
generic: AbstractIntKeyMap<V>
extends: Object
modifiers:
  - public
  - abstract
notes: |-
  This class represents an abstract base for implementing
    maps from int values to objects. All operations that can be implemented
    using iterators
    are implemented as such. In most cases, this is
    hardly an efficient solution, and at least some of those
    methods should be overridden by sub-classes.
methods:
  - name: __toString
    modifiers:
      - public
    return:
      type: String
      notes: a string representation of this map.
    notes: Returns a string representation of this map.
  - name: clear
    modifiers:
      - public
    return:
      type: void
    notes: "Description copied from interface: IntKeyMap"
  - name: containsKey
    modifiers:
      - public
    return:
      type: boolean
      notes: |-
        true if this map contains a mapping from
                      the specified key; returns false
                      otherwise.
    parameters:
      - name: key
        type: int
        notes: the key to test for.
    notes: "Description copied from interface: IntKeyMap"
  - name: containsValue
    modifiers:
      - public
    return:
      type: boolean
      notes: |-
        true if this map contains at least one
                      mapping to the specified value; returns
                      false otherwise.
    parameters:
      - name: value
        type: Object
        notes: the value to test for.
    notes: "Description copied from interface: IntKeyMap"
  - name: equals
    modifiers:
      - public
    return:
      type: boolean
      notes: |-
        true if this map is equal to the
                      specified object; returns false
                      otherwise.
    parameters:
      - name: obj
        type: Object
        notes: the object with which to compare this map.
    notes: "Description copied from interface: IntKeyMap"
  - name: get
    modifiers:
      - public
    return:
      type: V
      notes: |-
        the value that the specified key maps to; returns
                      null, if no mapping exists for the
                      specified key.
    parameters:
      - name: key
        type: int
        notes: the key to map to a value.
    notes: "Description copied from interface: IntKeyMap"
  - name: hashCode
    modifiers:
      - public
    return:
      type: int
      notes: a hash code value for this map.
    notes: "Description copied from interface: IntKeyMap"
  - name: isEmpty
    modifiers:
      - public
    return:
      type: boolean
      notes: |-
        true if this map is empty; returns
                      false otherwise.
    notes: "Description copied from interface: IntKeyMap"
  - name: putAll
    modifiers:
      - public
    return:
      type: void
    parameters:
      - name: map
        type: IntKeyMap
        generic: IntKeyMap<V>
        notes: the map whose mappings to add to this map.
    notes: "Description copied from interface: IntKeyMap"
  - name: remove
    modifiers:
      - public
    return:
      type: V
      notes: |-
        the old value (which can be null) if a
                      mapping from the specified key already existed
                      in this map; returns null otherwise.
    parameters:
      - name: key
        type: int
        notes: the key whose mapping to remove from this map.
    notes: "Description copied from interface: IntKeyMap"
  - name: size
    modifiers:
      - public
    return:
      type: int
      notes: the size of this map.
    notes: "Description copied from interface: IntKeyMap"
  - name: trimToSize
    modifiers:
      - public
    return:
      type: void
    notes: |-
      Does nothing. Sub-classes may provide an implementation to
        minimize memory usage, but this is not required since many
        implementations will always have minimal memory usage.
