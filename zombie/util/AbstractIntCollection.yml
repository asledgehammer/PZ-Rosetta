# zombie.util.AbstractIntCollection
package: zombie.util
type: class
name: AbstractIntCollection
extends: Object
modifiers:
  - public
  - abstract
notes: |-
  This class represents an abstract base for implementing
    collections of int values. All operations that can be implemented
    using iterators are implemented as such. In most cases, this is
    hardly an efficient solution, and at least some of those
    methods should be overridden by sub-classes.
methods:
  - name: __toString
    modifiers:
      - public
    return:
      type: String
      notes: a string representation of this collection.
    notes: Returns a string representation of this collection.
  - name: add
    modifiers:
      - public
    return:
      type: boolean
      notes: |-
        true if this collection was modified
                      as a result of adding v; returns
                      false otherwise.
    notes: Throws
  - name: addAll
    modifiers:
      - public
    return:
      type: boolean
      notes: |-
        true if this collection was modified
                      as a result of adding the elements of c;
                      returns false otherwise.
    notes: "Description copied from interface: IntCollection"
  - name: clear
    modifiers:
      - public
    return:
      type: void
    notes: "Description copied from interface: IntCollection"
  - name: contains
    modifiers:
      - public
    return:
      type: boolean
      notes: |-
        true if v is contained in this
                      collection; returns false otherwise.
    notes: "Description copied from interface: IntCollection"
  - name: containsAll
    modifiers:
      - public
    return:
      type: boolean
      notes: |-
        true if all the elements of c
                      are contained in this collection; returns
                      false otherwise.
    notes: "Description copied from interface: IntCollection"
  - name: isEmpty
    modifiers:
      - public
    return:
      type: boolean
      notes: |-
        true if this collection is empty; returns
                      false otherwise.
    notes: "Description copied from interface: IntCollection"
  - name: remove
    modifiers:
      - public
    return:
      type: boolean
      notes: |-
        true if this collection was modified
                      as a result of removing v; returns
                      false otherwise.
    notes: "Description copied from interface: IntCollection"
  - name: removeAll
    modifiers:
      - public
    return:
      type: boolean
      notes: |-
        true if this collection was modified
                      as a result of removing the elements of c;
                      returns false otherwise.
    notes: "Description copied from interface: IntCollection"
  - name: retainAll
    modifiers:
      - public
    return:
      type: boolean
      notes: |-
        true if this collection was modified
                      as a result of removing the elements not contained
                      in c;
                      returns false otherwise.
    notes: "Description copied from interface: IntCollection"
  - name: size
    modifiers:
      - public
    return:
      type: int
      notes: the number of elements in this collection.
    notes: "Description copied from interface: IntCollection"
  - name: toArray
    modifiers:
      - public
    return:
      type: int[]
      notes: |-
        a new array containing the elements of this
                      collection.
    notes: "Description copied from interface: IntCollection"
  - name: toArray
    modifiers:
      - public
    return:
      type: int[]
      notes: |-
        a, if a has room for all the
                      elements of this collection; otherwise a new
                      array is allocated, filled with the elements of
                      this collection, and returned.
    notes: "Description copied from interface: IntCollection"
  - name: trimToSize
    modifiers:
      - public
    return:
      type: void
    notes: |-
      Does nothing. Sub-classes may provide an implementation to
        minimize memory usage, but this is not required since many
        implementations will always have minimal memory usage.
