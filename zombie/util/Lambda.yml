# zombie.util.Lambda
package: zombie.util
type: class
name: Lambda
extends: Object
modifiers:
  - public
  - final
notes: A GC-friendly lambda class. Useful for capturing local variables for use
  in callbacks.
constructors:
  - name: Lambda
    modifiers:
      - public
methods:
  - name: capture
    modifiers:
      - public
      - static
    return:
      type: void
    parameters:
      - name: val1
        type: T1
  - name: capture
    modifiers:
      - public
      - static
    return:
      type: void
    parameters:
      - name: val1
        type: T1
      - name: val2
        type: " T2"
  - name: capture
    modifiers:
      - public
      - static
    return:
      type: void
    parameters:
      - name: val1
        type: T1
      - name: val2
        type: " T2"
      - name: val3
        type: " T3"
  - name: capture
    modifiers:
      - public
      - static
    return:
      type: void
    parameters:
      - name: val1
        type: T1
      - name: val2
        type: " T2"
      - name: val3
        type: " T3"
      - name: val4
        type: " T4"
  - name: capture
    modifiers:
      - public
      - static
    return:
      type: void
    parameters:
      - name: val1
        type: T1
      - name: val2
        type: " T2"
      - name: val3
        type: " T3"
      - name: val4
        type: " T4"
      - name: val5
        type: " T5"
  - name: capture
    modifiers:
      - public
      - static
    return:
      type: void
    parameters:
      - name: val1
        type: T1
      - name: val2
        type: " T2"
      - name: val3
        type: " T3"
      - name: val4
        type: " T4"
      - name: val5
        type: " T5"
      - name: val6
        type: " T6"
  - name: comparator
    modifiers:
      - public
      - static
    return:
      type: Comparator
      generic: Comparator<E>
    parameters:
      - name: val1
        type: T1
  - name: comparator
    modifiers:
      - public
      - static
    return:
      type: Comparator
      generic: Comparator<E>
    parameters:
      - name: val1
        type: T1
      - name: val2
        type: " T2"
  - name: consumer
    modifiers:
      - public
      - static
    return:
      type: Consumer
      generic: Consumer<E>
    parameters:
      - name: val1
        type: T1
  - name: consumer
    modifiers:
      - public
      - static
    return:
      type: Consumer
      generic: Consumer<E>
    parameters:
      - name: val1
        type: T1
      - name: val2
        type: " T2"
  - name: consumer
    modifiers:
      - public
      - static
    return:
      type: Consumer
      generic: Consumer<E>
    parameters:
      - name: val1
        type: T1
      - name: val2
        type: " T2"
      - name: val3
        type: " T3"
  - name: consumer
    modifiers:
      - public
      - static
    return:
      type: Consumer
      generic: Consumer<E>
    parameters:
      - name: val1
        type: T1
      - name: val2
        type: " T2"
      - name: val3
        type: " T3"
      - name: val4
        type: " T4"
  - name: consumer
    modifiers:
      - public
      - static
    return:
      type: Consumer
      generic: Consumer<E>
    parameters:
      - name: val1
        type: T1
      - name: val2
        type: " T2"
      - name: val3
        type: " T3"
      - name: val4
        type: " T4"
      - name: val5
        type: " T5"
  - name: contains
    modifiers:
      - public
      - static
    return:
      type: boolean
    parameters:
      - name: findFunction
        type: Predicate
        generic: Predicate<Predicate<E>>
      - name: captureVal1
        type: " T1"
    notes: >-
      contains
       A way to call in-place lambdas with captured variables while avoiding Garbage-Collection.
  - name: containsFrom
    modifiers:
      - public
      - static
    return:
      type: boolean
    parameters:
      - name: findFunction
        type: BiPredicate
        generic: BiPredicate<F,Predicate<E>>
      - name: from
        type: " F"
      - name: captureVal1
        type: " T1"
    notes: >-
      containsFrom
       A way to call in-place lambdas with captured variables while avoiding Garbage-Collection.
  - name: find
    modifiers:
      - public
      - static
    return:
      type: R
    parameters:
      - name: findFunction
        type: Function
        generic: Function<Predicate<E>,R>
      - name: captureVal1
        type: " T1"
    notes: >-
      find
       A way to call in-place lambdas with captured variables while avoiding Garbage-Collection.
  - name: forEach
    modifiers:
      - public
      - static
    return:
      type: void
    parameters:
      - name: forEachFunction
        type: Consumer
        generic: Consumer<Consumer<E>>
      - name: captureVal1
        type: " T1"
    notes: >-
      forEach
       A way to call in-place lambdas with captured variables while avoiding Garbage-Collection.
  - name: forEach
    modifiers:
      - public
      - static
    return:
      type: void
    parameters:
      - name: forEachFunction
        type: Consumer
        generic: Consumer<Consumer<E>>
      - name: captureVal1
        type: " T1"
      - name: captureVal2
        type: " T2"
    notes: >-
      forEach
       A way to call in-place lambdas with captured variables while avoiding Garbage-Collection.
  - name: forEachFrom
    modifiers:
      - public
      - static
    return:
      type: void
    parameters:
      - name: forEachFunction
        type: BiConsumer
        generic: BiConsumer<List<E>,Consumer<E>>
      - name: from
        type: " List"
        generic: " List<E>"
      - name: captureVal1
        type: " T1"
    notes: >-
      forEachFrom (List, 1-param)
       A way to call in-place lambdas with captured variables while avoiding Garbage-Collection.
  - name: forEachFrom
    modifiers:
      - public
      - static
    return:
      type: void
    parameters:
      - name: forEachFunction
        type: BiConsumer
        generic: BiConsumer<F,Consumer<E>>
      - name: from
        type: " F"
      - name: captureVal1
        type: " T1"
    notes: >-
      forEachFrom (Node, 1-param)
       A way to call in-place lambdas with captured variables while avoiding Garbage-Collection.
  - name: forEachFrom
    modifiers:
      - public
      - static
    return:
      type: void
    parameters:
      - name: forEachFunction
        type: BiConsumer
        generic: BiConsumer<List<E>,Consumer<E>>
      - name: from
        type: " List"
        generic: " List<E>"
      - name: captureVal1
        type: " T1"
      - name: captureVal2
        type: " T2"
    notes: >-
      forEachFrom (List, 2-param)
       A way to call in-place lambdas with captured variables while avoiding Garbage-Collection.
  - name: forEachFrom
    modifiers:
      - public
      - static
    return:
      type: void
    parameters:
      - name: forEachFunction
        type: BiConsumer
        generic: BiConsumer<F,Consumer<E>>
      - name: from
        type: " F"
      - name: captureVal1
        type: " T1"
      - name: captureVal2
        type: " T2"
    notes: >-
      forEachFrom (Node, 2-param)
       A way to call in-place lambdas with captured variables while avoiding Garbage-Collection.
  - name: indexOf
    modifiers:
      - public
      - static
    return:
      type: int
    parameters:
      - name: findFunction
        type: IntSupplierFunction
        generic: IntSupplierFunction<Predicate<E>>
      - name: captureVal1
        type: " T1"
    notes: >-
      contains
       A way to call in-place lambdas with captured variables while avoiding Garbage-Collection.
  - name: invoke
    modifiers:
      - public
      - static
    return:
      type: void
    parameters:
      - name: runFunction
        type: Consumer
        generic: Consumer<Runnable>
      - name: captureVal1
        type: " T1"
    notes: >-
      invoke
       A way to call in-place lambdas with captured variables while avoiding Garbage-Collection.
  - name: invoke
    modifiers:
      - public
      - static
    return:
      type: void
    parameters:
      - name: runFunction
        type: Consumer
        generic: Consumer<Runnable>
      - name: captureVal1
        type: " T1"
      - name: captureVal2
        type: " T2"
    notes: >-
      invoke
       A way to call in-place lambdas with captured variables while avoiding Garbage-Collection.
  - name: invoker
    modifiers:
      - public
      - static
    return:
      type: Runnable
    parameters:
      - name: val1
        type: T1
  - name: invoker
    modifiers:
      - public
      - static
    return:
      type: Runnable
    parameters:
      - name: val1
        type: T1
      - name: val2
        type: " T2"
  - name: invoker
    modifiers:
      - public
      - static
    return:
      type: Runnable
    parameters:
      - name: val1
        type: T1
      - name: val2
        type: " T2"
      - name: val3
        type: " T3"
  - name: invoker
    modifiers:
      - public
      - static
    return:
      type: Runnable
    parameters:
      - name: val1
        type: T1
      - name: val2
        type: " T2"
      - name: val3
        type: " T3"
      - name: val4
        type: " T4"
  - name: predicate
    modifiers:
      - public
      - static
    return:
      type: Predicate
      generic: Predicate<E>
    parameters:
      - name: val1
        type: T1
  - name: predicate
    modifiers:
      - public
      - static
    return:
      type: Predicate
      generic: Predicate<E>
    parameters:
      - name: val1
        type: T1
      - name: val2
        type: " T2"
  - name: predicate
    modifiers:
      - public
      - static
    return:
      type: Predicate
      generic: Predicate<E>
    parameters:
      - name: val1
        type: T1
      - name: val2
        type: " T2"
      - name: val3
        type: " T3"
