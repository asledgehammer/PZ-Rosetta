# zombie.util.Lambda
package: zombie.util
type: class
name: Lambda
extends: Object
modifiers:
  - public
  - final
notes: A GC-friendly lambda class. Useful for capturing local variables for use
  in callbacks.
constructors:
  - name: Lambda
    modifiers:
      - public
methods:
  - name: capture
    modifiers:
      - public
      - static
    returnType: void
    parameters:
      - name: val1
        type: T1
      - name: captureConsumer
        type: Stacks.Params1.ICallback
  - name: capture
    modifiers:
      - public
      - static
    returnType: void
    parameters:
      - name: val1
        type: T1
      - name: val2
        type: T2
      - name: captureConsumer
        type: Stacks.Params2.ICallback
  - name: capture
    modifiers:
      - public
      - static
    returnType: void
    parameters:
      - name: val1
        type: T1
      - name: val2
        type: T2
      - name: val3
        type: T3
      - name: captureConsumer
        type: Stacks.Params3.ICallback
  - name: capture
    modifiers:
      - public
      - static
    returnType: void
    parameters:
      - name: val1
        type: T1
      - name: val2
        type: T2
      - name: val3
        type: T3
      - name: val4
        type: T4
      - name: captureConsumer
        type: Stacks.Params4.ICallback
  - name: capture
    modifiers:
      - public
      - static
    returnType: void
    parameters:
      - name: val1
        type: T1
      - name: val2
        type: T2
      - name: val3
        type: T3
      - name: val4
        type: T4
      - name: val5
        type: T5
      - name: captureConsumer
        type: Stacks.Params5.ICallback
  - name: capture
    modifiers:
      - public
      - static
    returnType: void
    parameters:
      - name: val1
        type: T1
      - name: val2
        type: T2
      - name: val3
        type: T3
      - name: val4
        type: T4
      - name: val5
        type: T5
      - name: val6
        type: T6
      - name: captureConsumer
        type: Stacks.Params6.ICallback
  - name: comparator
    modifiers:
      - public
      - static
    returnType: Comparator
    parameters:
      - name: val1
        type: T1
      - name: comparator
        type: Comparators.Params1.ICallback
  - name: comparator
    modifiers:
      - public
      - static
    returnType: Comparator
    parameters:
      - name: val1
        type: T1
      - name: val2
        type: T2
      - name: comparator
        type: Comparators.Params2.ICallback
  - name: consumer
    modifiers:
      - public
      - static
    returnType: Consumer
    parameters:
      - name: val1
        type: T1
      - name: consumer
        type: Consumers.Params1.ICallback
  - name: consumer
    modifiers:
      - public
      - static
    returnType: Consumer
    parameters:
      - name: val1
        type: T1
      - name: val2
        type: T2
      - name: consumer
        type: Consumers.Params2.ICallback
  - name: consumer
    modifiers:
      - public
      - static
    returnType: Consumer
    parameters:
      - name: val1
        type: T1
      - name: val2
        type: T2
      - name: val3
        type: T3
      - name: consumer
        type: Consumers.Params3.ICallback
  - name: consumer
    modifiers:
      - public
      - static
    returnType: Consumer
    parameters:
      - name: val1
        type: T1
      - name: val2
        type: T2
      - name: val3
        type: T3
      - name: val4
        type: T4
      - name: consumer
        type: Consumers.Params4.ICallback
  - name: consumer
    modifiers:
      - public
      - static
    returnType: Consumer
    parameters:
      - name: val1
        type: T1
      - name: val2
        type: T2
      - name: val3
        type: T3
      - name: val4
        type: T4
      - name: val5
        type: T5
      - name: consumer
        type: Consumers.Params5.ICallback
  - name: contains
    modifiers:
      - public
      - static
    returnType: boolean
    parameters:
      - name: findFunction
        type: Predicate
      - name: captureVal1
        type: T1
      - name: lambdaFunc
        type: Predicates.Params1.ICallback
    notes: >-
      contains
       A way to call in-place lambdas with captured variables while avoiding Garbage-Collection.
  - name: containsFrom
    modifiers:
      - public
      - static
    returnType: boolean
    parameters:
      - name: findFunction
        type: BiPredicate
      - name: from
        type: F
      - name: captureVal1
        type: T1
      - name: lambdaFunc
        type: Predicates.Params1.ICallback
    notes: >-
      containsFrom
       A way to call in-place lambdas with captured variables while avoiding Garbage-Collection.
  - name: find
    modifiers:
      - public
      - static
    returnType: R
    parameters:
      - name: findFunction
        type: Function
      - name: captureVal1
        type: T1
      - name: lambdaFunc
        type: Predicates.Params1.ICallback
    notes: >-
      find
       A way to call in-place lambdas with captured variables while avoiding Garbage-Collection.
  - name: forEach
    modifiers:
      - public
      - static
    returnType: void
    parameters:
      - name: forEachFunction
        type: Consumer
      - name: captureVal1
        type: T1
      - name: lambdaFunc
        type: Consumers.Params1.ICallback
    notes: >-
      forEach
       A way to call in-place lambdas with captured variables while avoiding Garbage-Collection.
  - name: forEach
    modifiers:
      - public
      - static
    returnType: void
    parameters:
      - name: forEachFunction
        type: Consumer
      - name: captureVal1
        type: T1
      - name: captureVal2
        type: T2
      - name: lambdaFunc
        type: Consumers.Params2.ICallback
    notes: >-
      forEach
       A way to call in-place lambdas with captured variables while avoiding Garbage-Collection.
  - name: forEachFrom
    modifiers:
      - public
      - static
    returnType: void
    parameters:
      - name: forEachFunction
        type: BiConsumer
      - name: from
        type: List
      - name: captureVal1
        type: T1
      - name: lambdaFunc
        type: Consumers.Params1.ICallback
    notes: >-
      forEachFrom (List, 1-param)
       A way to call in-place lambdas with captured variables while avoiding Garbage-Collection.
  - name: forEachFrom
    modifiers:
      - public
      - static
    returnType: void
    parameters:
      - name: forEachFunction
        type: BiConsumer
      - name: from
        type: F
      - name: captureVal1
        type: T1
      - name: lambdaFunc
        type: Consumers.Params1.ICallback
    notes: >-
      forEachFrom (Node, 1-param)
       A way to call in-place lambdas with captured variables while avoiding Garbage-Collection.
  - name: forEachFrom
    modifiers:
      - public
      - static
    returnType: void
    parameters:
      - name: forEachFunction
        type: BiConsumer
      - name: from
        type: List
      - name: captureVal1
        type: T1
      - name: captureVal2
        type: T2
      - name: lambdaFunc
        type: Consumers.Params2.ICallback
    notes: >-
      forEachFrom (List, 2-param)
       A way to call in-place lambdas with captured variables while avoiding Garbage-Collection.
  - name: forEachFrom
    modifiers:
      - public
      - static
    returnType: void
    parameters:
      - name: forEachFunction
        type: BiConsumer
      - name: from
        type: F
      - name: captureVal1
        type: T1
      - name: captureVal2
        type: T2
      - name: lambdaFunc
        type: Consumers.Params2.ICallback
    notes: >-
      forEachFrom (Node, 2-param)
       A way to call in-place lambdas with captured variables while avoiding Garbage-Collection.
  - name: indexOf
    modifiers:
      - public
      - static
    returnType: int
    parameters:
      - name: findFunction
        type: IntSupplierFunction
      - name: captureVal1
        type: T1
      - name: lambdaFunc
        type: Predicates.Params1.ICallback
    notes: >-
      contains
       A way to call in-place lambdas with captured variables while avoiding Garbage-Collection.
  - name: invoke
    modifiers:
      - public
      - static
    returnType: void
    parameters:
      - name: runFunction
        type: Consumer
      - name: captureVal1
        type: T1
      - name: lambdaFunc
        type: Invokers.Params1.ICallback
    notes: >-
      invoke
       A way to call in-place lambdas with captured variables while avoiding Garbage-Collection.
  - name: invoke
    modifiers:
      - public
      - static
    returnType: void
    parameters:
      - name: runFunction
        type: Consumer
      - name: captureVal1
        type: T1
      - name: captureVal2
        type: T2
      - name: lambdaFunc
        type: Invokers.Params2.ICallback
    notes: >-
      invoke
       A way to call in-place lambdas with captured variables while avoiding Garbage-Collection.
  - name: invoker
    modifiers:
      - public
      - static
    returnType: Runnable
    parameters:
      - name: val1
        type: T1
      - name: invoker
        type: Invokers.Params1.ICallback
  - name: invoker
    modifiers:
      - public
      - static
    returnType: Runnable
    parameters:
      - name: val1
        type: T1
      - name: val2
        type: T2
      - name: invoker
        type: Invokers.Params2.ICallback
  - name: invoker
    modifiers:
      - public
      - static
    returnType: Runnable
    parameters:
      - name: val1
        type: T1
      - name: val2
        type: T2
      - name: val3
        type: T3
      - name: invoker
        type: Invokers.Params3.ICallback
  - name: invoker
    modifiers:
      - public
      - static
    returnType: Runnable
    parameters:
      - name: val1
        type: T1
      - name: val2
        type: T2
      - name: val3
        type: T3
      - name: val4
        type: T4
      - name: invoker
        type: Invokers.Params4.ICallback
  - name: predicate
    modifiers:
      - public
      - static
    returnType: Predicate
    parameters:
      - name: val1
        type: T1
      - name: predicate
        type: Predicates.Params1.ICallback
  - name: predicate
    modifiers:
      - public
      - static
    returnType: Predicate
    parameters:
      - name: val1
        type: T1
      - name: val2
        type: T2
      - name: predicate
        type: Predicates.Params2.ICallback
  - name: predicate
    modifiers:
      - public
      - static
    returnType: Predicate
    parameters:
      - name: val1
        type: T1
      - name: val2
        type: T2
      - name: val3
        type: T3
      - name: predicate
        type: Predicates.Params3.ICallback
